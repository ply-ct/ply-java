openapi: 3.0.2
info:
  title: Plyex Greetings
  version: 1.0.1
paths:
  /greetings:
    get:
      summary: List greetings
      description: One of them may be untoward.
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Greeting'
              example:
                - name: World
                  salutation: Hello
                - name: Cruel World
                  salutation: Goodbye
      x-codeSamples:
        -
          lang: Java
          source: |
            HttpClient client = HttpClient.newHttpClient();
            HttpRequest request = HttpRequest.newBuilder()
                    .uri(URI.create(baseUrl + "/greetings"))
                    .setHeader("Accept", "application/json")
                    .setHeader("Authorization", "Bearer " + authToken)
                    .build();

            HttpResponse<String> response = client.send(request, HttpResponse.BodyHandlers.ofString());
            if (response.statusCode() == HttpURLConnection.HTTP_OK) {
                Greeting[] greetings = new Gson().fromJson(response.body(), Greeting[].class);
                System.out.println("greetings: " + response.body());
            }
        -
          lang: Python
          source: |
            response = requests.get(
                f"{baseUrl}/greetings",
                headers={
                    "Accept": "application/json",
                    "Authorization": f"Bearer {authToken}"
                }
            )
            if (response.ok):
                greetings = response.json()
                print(f"greetings: {str(greetings)}")
        -
          lang: TypeScript
          source: |
            const response = await fetch(`${baseUrl}/greetings`, {
                method: 'get',
                headers: {
                    Accept: 'application/json',
                    Authorization: `Bearer ${authToken}`
                }
            });
            if (response.ok) {
                const greetings = await response.json() as Greeting[];
                console.log(`greetings: ${JSON.stringify(greetings)}`);
            }
    post:
      summary: Create a greeting
      requestBody:
        description: greeting
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Greeting'
            example:
              salutation: Howdy
              name: Cowboy
      responses:
        '201':
          description: Created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Greeting'
              example:
                status:
                  code: 201
                  message: Created
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StatusResponse'
              example:
                status:
                  code: 400
                  errors:
                    - Greeting should have required property 'name'
                    - Greeting should NOT have additional property 'notname'
                    - Greeting/salutation should NOT contain spaces
                  message: Bad Request
        '409':
          description: Conflict
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StatusResponse'
              example:
                status:
                  code: 409
                  message: Conflict
      x-codeSamples:
        -
          lang: Java
          source: |
            Greeting greeting = new Greeting();
            // TODO populate greeting object

            HttpClient client = HttpClient.newHttpClient();
            HttpRequest request = HttpRequest.newBuilder()
                    .uri(URI.create(baseUrl + "/greetings"))
                    .setHeader("Content-Type", "application/json")
                    .setHeader("Authorization", "Bearer " + authToken)
                    .POST(HttpRequest.BodyPublishers.ofString(new Gson().toJson(greeting)))
                    .build();

            HttpResponse<String> response = client.send(request, HttpResponse.BodyHandlers.ofString());
            if (response.statusCode() == HttpURLConnection.HTTP_CREATED) {
                String location = response.headers().firstValue("Location").get();
                System.out.println("Created greeting at: " + baseUrl + location);
            }
        -
          lang: Python
          source: |
            greeting = Greeting()
            # TODO populate greeting object

            response = requests.post(
                f"{baseUrl}/greetings",
                headers={
                    "Content-Type": "application/json",
                    "Authorization": f"Bearer {authToken}"
                },
                json=greeting.__dict__
            )
            if (response.status_code == HTTPStatus.CREATED):
                location = response.headers.get("Location")
                print(f"Created greeting at: {baseUrl}{location}")
        -
          lang: TypeScript
          source: |
            const greeting = new Greeting();
            // TODO populate greeting object

            const response = await fetch(`${baseUrl}/greetings`, {
                method: 'post',
                headers: {
                    'Content-Type': 'application/json',
                    Authorization: `Bearer ${authToken}`
                },
                body: JSON.stringify(greeting)
            });
            if (response.status === StatusCodes.CREATED) {
                const location = response.headers.get('Location');
                console.log(`Created greeting at: ${baseUrl}${location}`);
            }
  /greetings/{name}:
    get:
      summary: Retrieve a greeting
      description: This greeting is very polite
      parameters:
        - name: name
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Greeting'
              example:
                name: World
                salutation: Hello
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StatusResponse'
              example:
                status:
                  code: 404
                  message: Not Found
      x-codeSamples:
        -
          lang: Java
          source: |
            HttpClient client = HttpClient.newHttpClient();
            String name = "World";

            HttpRequest request = HttpRequest.newBuilder()
                    .uri(URI.create(baseUrl + "/greetings/" + name))
                    .setHeader("Accept", "application/json")
                    .setHeader("Authorization", "Bearer " + authToken)
                    .build();

            HttpResponse<String> response = client.send(request, HttpResponse.BodyHandlers.ofString());
            if (response.statusCode() == HttpURLConnection.HTTP_OK) {
                Greeting greeting = new Gson().fromJson(response.body(), Greeting.class);
                assert greeting.getName().equals(name);
                System.out.println("greeting: " + response.body());
            }
        -
          lang: Python
          source: |
            name = "World"

            response = requests.get(
                f"{baseUrl}/greetings/{name}",
                headers={
                    "Accept": "application/json",
                    "Authorization": f"Bearer {authToken}"
                }
            )
            if (response.ok):
                greeting = response.json()
                assert greeting["name"] == name
                print(f"greeting: {str(greeting)}")
        -
          lang: TypeScript
          source: |
            const name = 'World';

            const response = await fetch(`${baseUrl}/greetings/${name}`, {
                method: 'get',
                headers: {
                    Accept: 'application/json',
                    Authorization: `Bearer ${authToken}`
                }
            });
            if (response.ok) {
                const greeting = await response.json() as Greeting;
                assert.equal(greeting.name, name);
                console.log(`greeting: ${JSON.stringify(greeting)}`);
            }
    put:
      summary: Update a greeting
      description: Replaces entire greeting contents
      parameters:
        - name: name
          in: path
          required: true
          schema:
            type: string
      requestBody:
        description: greeting
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Greeting'
            example:
              salutation: Hey There
              name: Stranger
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Greeting'
              example:
                status:
                  code: 200
                  message: OK
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StatusResponse'
              example:
                status:
                  code: 400
                  message: Bad Request
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StatusResponse'
              example:
                status:
                  code: 404
                  message: Not Found
      x-codeSamples:
        -
          lang: Java
          source: |
            Greeting greeting = new Greeting();
            String name = "Stranger";
            greeting.setName(name);
            // TODO populate greeting object

            URI uri = URI.create(baseUrl + "/greetings/" + name);
            HttpClient client = HttpClient.newHttpClient();
            HttpRequest request = HttpRequest.newBuilder()
                    .uri(uri)
                    .setHeader("Content-Type", "application/json")
                    .setHeader("Authorization", "Bearer " + authToken)
                    .PUT(HttpRequest.BodyPublishers.ofString(new Gson().toJson(greeting)))
                    .build();

            HttpResponse<String> response = client.send(request, HttpResponse.BodyHandlers.ofString());
            if (response.statusCode() == HttpURLConnection.HTTP_OK) {
                System.out.println("Successfully updated greeting at: " + uri);
            }
        -
          lang: Python
          source: |
            greeting = Greeting()
            name = "Stranger"
            greeting.name = name
            # TODO populate greeting object

            url = f"{baseUrl}/greetings/{name}"
            response = requests.put(
                url,
                headers={
                    "Content-Type": "application/json",
                    "Authorization": f"Bearer {authToken}"
                },
                json=greeting.__dict__
            )
            if (response.ok):
                print(f"Successfully updated greeting at: {url}")
        -
          lang: TypeScript
          source: |
            const greeting = new Greeting();
            const name = 'Stranger';
            greeting.name = name;
            // TODO populate greeting object

            const url = `${baseUrl}/greetings/${name}`;
            const response = await fetch(url, {
                method: 'put',
                headers: {
                    'Content-Type': 'application/json',
                    Authorization: `Bearer ${authToken}`
                },
                body: JSON.stringify(greeting)
            });
            if (response.ok) {
                console.log(`Successfully updated greeting at: ${url}`);
            }
    delete:
      summary: Delete a greeting (so long)
      description: And a description
      parameters:
        - name: name
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StatusResponse'
              example:
                status:
                  code: 200
                  message: OK
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StatusResponse'
              example:
                status:
                  code: 404
                  message: Not Found
components:
  schemas:
    Greeting:
      additionalProperties: false
      properties:
        name:
          type: string
        salutation:
          maxLength: 10
          type: string
      required:
        - salutation
        - name
      type: object
    Status:
      additionalProperties: false
      properties:
        code:
          $ref: '#/components/schemas/StatusCodes'
        errors:
          items:
            type: string
          type: array
        message:
          type: string
      required:
        - code
        - message
      type: object
    StatusResponse:
      additionalProperties: false
      properties:
        status:
          $ref: '#/components/schemas/Status'
      required:
        - status
      type: object
    StatusCodes:
      enum:
        - 100
        - 101
        - 102
        - 200
        - 201
        - 202
        - 203
        - 204
        - 205
        - 206
        - 207
        - 300
        - 301
        - 302
        - 303
        - 304
        - 305
        - 307
        - 308
        - 400
        - 401
        - 402
        - 403
        - 404
        - 405
        - 406
        - 407
        - 408
        - 409
        - 410
        - 411
        - 412
        - 413
        - 414
        - 415
        - 416
        - 417
        - 418
        - 419
        - 420
        - 422
        - 423
        - 424
        - 428
        - 429
        - 431
        - 451
        - 500
        - 501
        - 502
        - 503
        - 504
        - 505
        - 507
        - 511
      type: number
